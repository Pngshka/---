import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchState, fetchStateSecond } from './counterAPI';

const initialState = {
    status: 'loadingManifest',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadingManifest = createAsyncThunk(
  'game/fetchState',
  async (amount) => {
    const response = await fetchState(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const initLevel = createAsyncThunk(
    'game/fetchStateSecond',
    async (amount) => {
      const response = await fetchStateSecond(amount);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );

export const gameSlice = createSlice({
    name: 'game',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // loadingManifest: (state) => {
        //     state.status = 'loadingManifest';
        // },
        // loadingAssets: (state) => {
        //     state.status = 'loadingAssets';
        // },
        initialization: (state) => {
            state.status = 'initialization';
        },
        // initLevel: (state) => {
        //     state.status = 'initLevel';
        // },
        playing: (state) => {
            state.status = 'playing';
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        // builder
        // .addCase(loadingManifest.fulfilled, (state) => {
        //     state.status = 'loadingAssets';
        // })
        // .addCase(initLevel.fulfilled, (state) => {
        //     state.status = 'playing';
        // })
        // .addDefaultCase((state) => {
        //     // Обработка других случаев действий
        // });

        builder
      .addCase(loadingManifest.fulfilled, (state, action) => {
        // action is inferred correctly here if using TS
        state.status = 'loadingManifest';
      })
      // You can chain calls, or have separate `builder.addCase()` lines each time
      .addCase(initLevel.fulfilled, (state, action) => {
        state.status = 'initLevel';
      })
      // You can match a range of action types
    //   .addMatcher(
    //     isRejectedAction,
    //     // `action` will be inferred as a RejectedAction due to isRejectedAction being defined as a type guard
    //     (state, action) => {}
    //   )
      // and provide a default case if no other handlers matched
      .addDefaultCase((state, action) => {})
},

});

export const { /*loadingManifest,*/ loadingAssets, initialization, /*initLevel,*/ playing } = gameSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.game.status)`
export const selectState = (state) => state.game.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectState(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default gameSlice.reducer;
